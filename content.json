{"meta":{"title":"DreamSpark Blog","subtitle":"那年 有人 喜欢瞎折腾 那年 有人 把编程作为乐趣 那年 有人 知足常乐","description":null,"author":"Imagick","url":"https://lt123456.github.io"},"pages":[{"title":"about","date":"2016-09-21T09:07:06.000Z","updated":"2016-09-21T09:07:06.303Z","comments":true,"path":"about/index.html","permalink":"https://lt123456.github.io/about/index.html","excerpt":"","text":""},{"title":"","date":"2016-09-22T03:09:55.499Z","updated":"2016-09-22T03:09:55.470Z","comments":false,"path":"tags/index.html","permalink":"https://lt123456.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"git的使用","slug":"git","date":"2015-12-21T12:36:21.000Z","updated":"2016-10-21T08:30:53.991Z","comments":true,"path":"2015/12/21/git/","link":"","permalink":"https://lt123456.github.io/2015/12/21/git/","excerpt":"Git是什么？Git是目前世界上先进的分布式版本控制系统。这里我将带你认识git,怎么用git来管理项目.","text":"Git是什么？Git是目前世界上先进的分布式版本控制系统。这里我将带你认识git,怎么用git来管理项目. Git Start什么是git? 在谈git之前我简单介绍之前我用的SVN. 版本控制器,SVN它是分客户端和服务器端,一般小团队一台主机作为服务器端(主干),其他人就是从 主干上check out 下代码, 然后 开发, 提交 更新 , 合并, 常用的操作: 1234567891011121314151617181920212223242526272829 Svn checkout 检出 代码 Svn update 更新主干(中央版本库的代码) Svn commit 提交自己的代码``` 一般window 都有方便的图形界面具体的你可以去[SVN官网](https://tortoisesvn.net/)查看2. Git 相对Svn 就没有所谓的中央版本库,它采用改的分布式版本控制系统,开发者除了本地有一套完整的代码,实际上都有一个远程的分支 与之对应,用来代码的提交 和 版本的控制,相对Svn来说 更加方便3. 谈谈两者的区别. Svn 对于网络的依赖性太大,链接不到中央版本库,就没法 更新, 提交 代码. Git 提交代码, 它会 Git commit 提交到本地(细心的会发现项目根目录的git文件),可以随时查看修改的历史, 当有网络时,就可以迅速 git push 到 你的远程分支. 谈到这里是否想迅速深入 git , 别着急 , 我们将一步一步带你认识Git ### 安装 gitgit的安装,在网上会有很多教程,这里我还是大概的谈论一下1. linux install``` sudo apt-get install git # 跑完命令基本git安装完毕(ubuntu) window install 绝对的傻瓜方式的安装 去下载git镜像,然后 next-next 知道安装 结束, local push orign 去 github 上申请账号, 然后 create new repository, 加上描述, 这样一个git 远程仓库 ok 本地有个 dreamspark的项目 想 托管到 git 怎么办? 不着急, 用你安装的git工具 执行命令1git init #实质：你的项目目录下初始化一个repository，执行成功后，会在你的目录下生成一个.git的隐藏文件。 如果你时 windows 服务器，那就更加简单了, 直接右键-&gt; Git init 即可 3.执行命令1git add . #表示把该目录下的所有文件加入到本地暂存区中。执行成功后不会有任何提示： 这一步没提示，==没提示== 查看你是否有更新 1git status #该命令会把你本地工作区和暂存区的版本进行比较，查看当前的状态。我下面的状态是已经把所有文件加入到了暂存区中，但是还没有提交到本地历史区 介绍的有点啰嗦， 也就是产看你修改，添加的文件。 5.添加一个注释 1git commit -a -m &apos;dreamspark 2015 init&apos;; #该命令会把本地暂存区中的文件提交到本地历史区，注意只有在本地历史区中的内容才能提交到github。执行该命令后，我们所有的文件都只是在本地。没有github任何关系。 关联远程 分支。现在已经将我们的 项目 添加 到 本地历史区， 可是怎么和刚才建立的远程仓库关联,这个问题问的好, 去git 复制 你刚创建的 仓库地址,dreamspark 1git remote add origin https://github.com/lt123456/lt123456.github.io.git #该命令是把本地历史区中的文件添加到github服务器的暂存区中。这一步是本地和远程服务器建立联系的重要一步。 执行成功后没有反馈, 提交代码终于迎来激动人心的好时刻 1git push origin dreamspark #提交到git 到这里你如果是初学者, 基本已经可以创建远程分支关联本地了 常用的git 命令普及一下我个人感觉常用的 git 命令 git config 12git config --global user.name &quot;xxx&quot; # 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息git config --global user.email &quot;xxx&quot; ##配置邮箱 分支相关 1234567891. git branch -b name: #创建分支 2. git checkout 分支名 # 切换 分支 3. git push origin 本地分支: 远程分支 # 本地分支提交到远程分支 4. git push origin --delete [branch-name] #删除远程分支５. git clone -b +分支 +路径 # 克隆远程分支 3.常用的总结 1234567git pull origin master --从远程仓库同步代码到本地git add . -- 添加所有修改文件git commit -a -m &quot;注释&quot; -- 注释git push origin master -- 提交分支 到这里你应该可以初步认识 git了.","categories":[],"tags":[{"name":"git 安装","slug":"git-安装","permalink":"https://lt123456.github.io/tags/git-安装/"},{"name":"git 使用","slug":"git-使用","permalink":"https://lt123456.github.io/tags/git-使用/"}],"keywords":[]}]}